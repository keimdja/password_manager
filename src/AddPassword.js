import React, { useState } from 'react';
import { Box, TextField, Button, Typography, IconButton } from '@mui/material';
import VisibilityIcon from '@mui/icons-material/Visibility';
import VisibilityOffIcon from '@mui/icons-material/VisibilityOff';
import CryptoJS from 'crypto-js';
import { collection, addDoc, serverTimestamp } from 'firebase/firestore'; // Import Firestore functions
import { auth, db } from './firebase'; // Import your Firebase and auth setup
import { ref, set } from 'firebase/database'; // Assuming using Firebase Realtime DB, adjust if using Firestore
import { useNavigate } from 'react-router-dom';

const AddPassword = () => {
    const [service, setService] = useState('');
    const [username, setUsername] = useState('');
    const [password, setPassword] = useState('');
    const [showPassword, setShowPassword] = useState(false);
    const [securePassword, setSecurePassword] = useState('');
    const navigate = useNavigate();

    const secretKey = process.env.REACT_APP_CRYPTO_SECRET_KEY;

    // Toggle password visibility
    const handlePasswordVisibility = () => {
        setShowPassword(!showPassword);
    };

    // Generate a secure password (simple example using Math.random)
    const generateSecurePassword = () => {
        const newPassword = Math.random().toString(36).slice(-8);
        setSecurePassword(newPassword);
        setPassword(newPassword); // Set generated password into the input field
    };

    // Encrypt and save password
    const handleSavePassword = async () => {
        console.log("Starting to save password...");
    
        const encryptedPassword = CryptoJS.AES.encrypt(password, secretKey).toString();
        console.log("Encrypted Password:", encryptedPassword);
    
        const userId = auth.currentUser?.uid; // Get the currently logged-in user's ID
        console.log("User ID:", userId);
    
        if (!userId) {
            alert('User is not authenticated. Please log in.');
            return;
        }
    
        try {
            // Add a new document to the passwordVault collection
            const docRef = await addDoc(collection(db, 'passwordVault'), {
                userId, // User ID for association
                serviceName: service, // Name of the service
                usernameOrEmail: username, // Username or email
                encryptedPassword, // Encrypted password
                createdAt: serverTimestamp(), // Automatically generate a timestamp
            });
    
            console.log("Document written with ID:", docRef.id);
            console.log("Saved Data:", {
                userId,
                serviceName: service,
                usernameOrEmail: username,
                encryptedPassword,
                createdAt: "Timestamp generated by Firestore",
            });
    
            alert('Password saved successfully!');
    
            setService(''); // Reset the input fields
            setUsername('');
            setPassword('');
    
            navigate('/dashboard'); // Navigate back to the dashboard
        } catch (error) {
            console.error('Error saving password:', error);
            alert('Failed to save the password. Please try again.');
        }
    };
    

    // Cancel and return to dashboard
    const handleCancel = () => {
        navigate('/dashboard');
    };

    return (
        <Box sx={{ width: '100%', maxWidth: '500px', p: 3 }}>
            <Typography variant="h5" gutterBottom>
                Add New Password
            </Typography>

            <TextField
                label="Service"
                fullWidth
                value={service}
                onChange={(e) => setService(e.target.value)}
                sx={{ mb: 2 }}
            />

            <TextField
                label="Username/Email"
                fullWidth
                value={username}
                onChange={(e) => setUsername(e.target.value)}
                sx={{ mb: 2 }}
            />

            <TextField
                label="Password"
                type={showPassword ? 'text' : 'password'}
                fullWidth
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                sx={{ mb: 2 }}
                InputProps={{
                    endAdornment: (
                        <IconButton onClick={handlePasswordVisibility}>
                            {showPassword ? <VisibilityOffIcon /> : <VisibilityIcon />}
                        </IconButton>
                    ),
                }}
            />

            <Button
                variant="outlined"
                sx={{ mb: 2 }}
                onClick={generateSecurePassword}
            >
                Generate Secure Password
            </Button>

            <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>
                <Button
                    variant="contained"
                    color="primary"
                    onClick={handleSavePassword}
                >
                    Save
                </Button>
                <Button variant="outlined" onClick={handleCancel}>
                    Cancel
                </Button>
            </Box>
        </Box>
    );
};

export default AddPassword;
